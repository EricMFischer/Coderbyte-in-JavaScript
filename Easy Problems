//Coderbyte Solutions

//Problem 1
function firstReverse(str) {
    return str.split("").reverse().join("");
}


//Problem 2
function FirstFactorial(num) {
    if (num === 0) {return 1;} 
    else {return num * FirstFactorial(num-1);}
}


//Problem 3
function LongestWord(sen) {
    return sen.match(/[\w]+/g).sort( function(a,b) {return b.length - a.length}).shift();
}


//Problem 4
function LetterChanges(str) {
  return str.replace(/\w/g, function (x) {return String.fromCharCode(x.charCodeAt(0) + 1);})
            .replace(/[aeiou]/g, function (y) {return y.toUpperCase();});
}


//Problem 5
function SimpleAdding(num) {
  var sum = 0;
  for (var i=1; i<=num; i++) {sum += i;}
  return sum;
}


//Problem 6
function LetterCapitalize(str) {
  return str.replace(/\b\w/g, function (capLetter) {return capLetter.toUpperCase();} );
}


//Problem 7
function SimpleSymbols(str) {
  var alpha = "abcdefghijklmnopqrstuvwxyz";
  var text = str.split("");
  for (var i=0; i<text.length; i++) {
    if ( alpha.indexOf(text[i]) != -1  &&  (text[i-1] != "+" || text[i+1] != "+") ) 
    {return false;}
  } 
  return true;
}


//Problem 8
function CheckNums(num1,num2) {
  if (num1 === num2) {return -1;}
  else {return num2 > num1;}
}


//Problem 9
function TimeConvert(num) {
  return Math.floor(num/60) + ":" + num%60;
}


//Problem 10
function AlphabetSoup(str) {
  return str.split("").sort().join("");     
}


// Problem 11
function ABCheck(str) {
  for (var i=0; i<str.length; i++) {
    if (str[i] == "a"  &&  (str[i+4] == "b" || str[i-4] == "b"))
    {return true;}
  }
  return false;
}


//Problem 12
function VowelCount(str) {
  var vowels = "aeiouAEIOU";
  var count = 0;
  for (var i=0; i<str.length; i++) {
    if (vowels.indexOf(str[i]) != -1) {count += 1;}
  }
  return count;
}


//Problem 13
function WordCount(str) {
  return str.split(" ").length;
}


//Problem 14
function ExOh(str) {
  var xCount = 0;
  var oCount = 0;
  for (var i=0; i<str.length; i++) {
    if (str[i] == "x") {xCount++}
    else if (str[i] == "o") {oCount++}
}
  return xCount == oCount;
}


//Problem 15
function Palindrome(str) {
  var originalStr = str.split(" ").join("");
  var reversedStr = str.split(" ").join("").split("").reverse().join("");
  if (originalStr === reversedStr) {return true;}
  else {return false;}
}


//Problem 16
function ArithGeo(arr) {
  var first = arr[0];
  var second = arr[1];
  var last = arr[arr.length-1];
  var secondToLast = arr[arr.length-2];
  
  if ((second - first) === (last - secondToLast)) {return "Arithmetic";} 
  else if ((second / first) === (last / secondToLast)) {return "Geometric";} 
  else {return "-1";}      
}


//Problem 17
function ArrayAdditionI(arr) { 
  arr.sort(function(a,b){return a - b});
  var largest = arr.pop();
  var sum = 0;
  
  for (var i=0; i<arr.length; i++){
    sum += arr[i];
    for (var j=0; j<arr.length; j++){   
      if (i != j) { 
        sum += arr[j];
        if (sum == largest) {
          return true;
        }
      }
    }
    for (var k=0; k<arr.length; k++) {
      if (i != k) {
        sum -= arr[k];
        if (sum == largest) {
          return true;
        }
      }
    }
    sum = 0;
  }
  return false; 
}


//Problem 18
function LetterCountI(str) {
  var text = str.split(" ");
  var count = 0;
  
  for (var i=0; i<text.length; i++) {
    var word = text[i];
    for (var j=0; j<word.length; j++) {
      var letter = word[j];
      for (var k=0; k<word.length; k++) {
        if ((j!==k) && (letter === word[k])) {
          count++;
          if (count>0) {
            return word;
          }
        }
      }
    }
  }
  return -1; 
}


//Problem 19
function SecondGreatLow(arr) {
  var unique = [arr[0]];
  for (var i=1; i<arr.length; i++) {
    if (unique.indexOf(arr[i]) === -1) {
      unique.push(arr[i]);
    }
  }
  unique.sort(function(a,b){return a - b;});
  var smallest = unique[1];
  unique.reverse();
  var largest = unique[1];
  return smallest + " " + largest;
}


//Problem 20
function DivisionStringified(num1,num2) {
  var answer = Math.round(num1/num2).toString(); 
  if (answer.length > 3) {
    var array = [];
    var reversed = answer.split("").reverse();
    var total = 0;
    
    for (var i=0; i<reversed.length; i++){
      total++;
      array.push(reversed[i]);
      if(total%3 === 0) {array.push(",");}
    }
    return array.reverse().join("");
  } 
  else {return answer;}
}


//Problem 21
function CountingMinutesI (str) {
  var times = str.split("-");
  var time1 = times[0].slice(0, times[0].length-2).split(":");
  var time1meridiem = times[0][times[0].length-2];
  var time1min = parseInt(time1[0]) * 60 + parseInt(time1[1]);
  
  var time2 = times[1].slice(0, times[1].length-2).split(":");
  var time2meridiem = times[1][times[1].length-2];
  var time2min = parseInt(time2[0]) * 60 + parseInt(time2[1]);
  
  if (time1meridiem === "p" && time1[0] !== "12") {time1min += 12*60;}
  if (time1meridiem === "a" && time1[0] === "12") {time1min -= 12*60;}
  if (time2meridiem === "p" && time2[0] !== "12") {time2min += 12*60;}
  if (time2meridiem === "a" && time2[0] === "12") {time2min -= 12*60;}

  if (time1min > time2min) {return 24*60 - (time1min - time2min);}
  else {return time2min - time1min;}
}


//Problem 22
function MeanMode(arr) {
  var mode;
  var modeCount = 1;
  var sum = 0;
  var mean;
  var total = 0;
  for (var i=0; i<arr.length; i++) {
    total += arr[i];
    for (var j=0; j<arr.length; j++) {
      if (arr[i] === arr[j]) {
          sum += 1;
          if (sum > modeCount) {
            modeCount = sum;
            mode = arr[i];
          }
      }
    }
    sum = 0;
  }
  var mean = Math.round(total/arr.length);
  
  if (mode === mean) {return 1;}
  else {return 0;}
}


//Problem 23
function DashInsert(str) {
  var num = str.toString().split("");
  var result = [];
  
  for (var i=0; i<num.length; i++) {
    result.push(num[i]);
    if (num[i]%2 !== 0  &&  num[i+1]%2 === 1) {
      result.push("-");
    }
  }
  return result.join("");
}


//Problem 24
function SwapCase(str) {
  p = [];
  var arr = str.split("");
  for(var i=0; i<arr.length; i++) {
    if(arr[i] === arr[i].toUpperCase()){
      p.push(arr[i].toLowerCase());
    } else {p.push(arr[i].toUpperCase());}
  }
  return p.join("");
}


//Problem 25
function NumberAddition(str) {
  var arr = str.replace(/\D/g, " ").split(" ").filter(function(arr) {return arr !== ""});
  var total = 0;
  for (var i=0; i<arr.length; i++) {
    total = total + parseInt(arr[i])
      }
  return total;
}


//Problem 26
function ThirdGreatest(strArr) {
  strArr.sort(function(a,b) {return b.length - a.length;});
  return strArr[2];
}


//Problem 27
function PowersofTwo(num) {
  for(var i=0; i<num; i++) {
    var powerOfTwo = Math.pow(i,2);
    if (powerOfTwo === num) {return true;}
  }
  return false;
}


//Problem 28
function AdditivePersistence(num) {
  var sum = 0;
  var loopCount = 0;
  var value = num.toString().split("").map(function(t) {return parseInt(t)});
  
  while (value.length > 1) {
    sum = 0;
    value.forEach(function(number) {sum += number;});
    value = sum.toString().split("").map(function(t) {return parseInt(t)});
    loopCount++;
  }
  return loopCount;       
}


//Problem 29
function MultiplicativePersistence(num) {
  var product = 1;
  var loopCount = 0;
  var value = num.toString().split("").map(function(x) {return parseInt(x)});
  
  while (value.length > 1) {
    product = 1;
    value.forEach(function(number) {product *= number;});
    value = product.toString().split("").map(function(x) {return parseInt(x)});
    loopCount++;
  }
  return loopCount;
}


//Problem 30
function OffLineMinimum(strArr) {
  var subset = [];
  var min = 0;
  function findMin (arr) {return arr.sort(function(a,b) {return Number(a)-Number(b)})[0];}
  
  for (var i=0; i<strArr.length; i++) {
    if (strArr[i] == "E") {
      min = findMin(strArr.slice(0,i));
      minIndex = strArr.slice(0,i).indexOf(min)
      subset.push(Number(min));
      strArr = strArr.slice(0,minIndex).concat(strArr.slice(minIndex+1,i)).concat(strArr.slice(i+1));
      i-=2;
    }
  }
  return subset.join(",");      
}
